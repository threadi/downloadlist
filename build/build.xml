<?xml version="1.0" encoding="UTF-8"?>
<project name="download-list-block-with-icons" basedir="." default="help">

	<!-- Include config file containing  -->
	<loadproperties srcFile="build.properties" />

	<!-- Sets variables which can later be used. -->
	<property name="src.dir" location="../" />
	<property name="build.dir" location="../releases" />
	<property name="log.dir" location="./" />

	<!-- check for necessary vars -->
	<fail unless="plugin.slug" />
	<fail unless="plugin.version" />
	<fail unless="npm.path" />
	<fail unless="composer.path" />
	<fail message="Do not run as root!">
		<condition>
			<equals arg1="root" arg2="${user.name}"/>
		</condition>
	</fail>

	<!-- install composer -->
	<target name="composer-install">
		<delete file="${log.dir}/composer-install.txt"/>
		<exec dir="${src.dir}" failonerror="true" executable="${composer.path}" output="${log.dir}/composer-install.txt">
			<arg line="install"/>
		</exec>
	</target>

	<!-- install npm -->
	<target name="npm-install">
		<delete file="${log.dir}/npm-install.txt"/>
		<exec dir="${src.dir}" failonerror="true" executable="${npm.path}" output="${log.dir}/npm-install.txt">
			<arg line="i"/>
		</exec>
	</target>

	<!-- build the Blocks via npm and add font libs -->
	<target name="npm-build" depends="npm-install">
		<delete file="${log.dir}/npm-build.txt"/>
		<exec dir="${src.dir}" failonerror="true" executable="${npm.path}" output="${log.dir}/npm-build.txt">
			<arg line="run build"/>
		</exec>
		<copy file="${src.dir}/node_modules/@fortawesome/fontawesome-free/css/all.css" tofile="${src.dir}/css/fontawesome/fontawesome6.css" />
		<copy todir="${src.dir}/css/webfonts/">
			<fileset dir="${src.dir}/node_modules/@fortawesome/fontawesome-free/webfonts/" />
		</copy>
		<copy file="${src.dir}/node_modules/bootstrap-icons/font/bootstrap-icons.css" tofile="${src.dir}/css/bootstrap/bootstrap-icons.css" />
		<copy todir="${src.dir}/css/bootstrap/fonts/">
			<fileset dir="${src.dir}/node_modules/bootstrap-icons/font/fonts/" />
		</copy>
	</target>

	<!-- set version number for the release -->
	<target name="setVersionNumber">
		<delete file="${build.dir}/${plugin.slug}-release.php"/>
		<copy file="${src.dir}/${plugin.slug}.php" tofile="${src.dir}/${plugin.slug}-release.php"/>
		<replace file="${src.dir}/${plugin.slug}-release.php">
			<replacefilter token="@@VersionNumber@@" value="${plugin.version}" />
		</replace>
		<delete file="${build.dir}/uninstall-release.php"/>
		<copy file="${src.dir}/uninstall.php" tofile="${src.dir}/uninstall-release.php"/>
		<replace file="${src.dir}/uninstall-release.php">
			<replacefilter token="@@VersionNumber@@" value="${plugin.version}" />
		</replace>
	</target>

	<!-- check WCS compatibility -->
	<target name="check-wcs" depends="composer-install">
		<exec dir="${src.dir}" failonerror="false" executable="vendor/bin/phpcbf">
			<arg line="--extensions=php --ignore=*/vendor/*,*/node_modules/*,*/block/*,*/svn/*,*/src/* --standard=ruleset.xml ."/>
		</exec>
		<exec dir="${src.dir}" failonerror="true" executable="vendor/bin/phpcs">
			<arg line="--extensions=php --ignore=*/vendor/*,*/node_modules/*,*/block/*,*/svn/*,*/src/* --standard=ruleset.xml ."/>
		</exec>
	</target>

	<!-- generate documentation -->
	<target name="generate-documentation" depends="composer-install">
		<exec dir="${src.dir}" failonerror="false" executable="vendor/bin/wp-documentor">
			<arg line="parse . --ignore-vcs-ignored --format=markdown --exclude=block --exclude=svn  --exclude=vendor  --exclude=src --output=docs/hooks.md --prefix=downloadlist_"/>
		</exec>
	</target>

	<!-- init project -->
	<target name="init" description="initialize the project" depends="npm-build" />

	<!-- create release-zip -->
	<target name="build" description="builds a new release" depends="init,npm-build,check-wcs,generate-documentation,setVersionNumber">
		<delete file="${build.dir}/${plugin.slug}_${plugin.version}.zip"/>
		<zip destfile="${build.dir}/${plugin.slug}_${plugin.version}.zip">
			<zipfileset dir="${src.dir}/admin" prefix="${plugin.slug}/admin" />
			<zipfileset dir="${src.dir}/block" prefix="${plugin.slug}/block" />
			<zipfileset dir="${src.dir}/classes" prefix="${plugin.slug}/classes" />
			<zipfileset dir="${src.dir}/css" prefix="${plugin.slug}/css">
				<exclude name="**/.gitkeep" />
			</zipfileset>
			<zipfileset dir="${src.dir}/gfx" prefix="${plugin.slug}/gfx" />
			<zipfileset dir="${src.dir}/inc" prefix="${plugin.slug}/inc" />
			<zipfileset dir="${src.dir}/templates" prefix="${plugin.slug}/templates" />
			<zipfileset dir="${src.dir}" includes="readme.txt,block.json,wpml-config.xml" prefix="${plugin.slug}" />
			<zipfileset dir="${src.dir}" includes="${plugin.slug}-release.php" fullpath="${plugin.slug}/${plugin.slug}.php" />
			<zipfileset dir="${src.dir}" includes="uninstall-release.php" fullpath="${plugin.slug}/uninstall.php" />
		</zip>
		<delete file="${src.dir}/${plugin.slug}-release.php"/>
		<delete file="${src.dir}/uninstall-release.php"/>
	</target>

	<!-- show help -->
	<target name="help">
		<java classname="org.apache.tools.ant.Main">
			<arg value="-projecthelp" />
			<arg value="-buildfile" />
			<arg value="build.xml" />
		</java>
	</target>

</project>
